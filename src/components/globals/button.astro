---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

const button = cva(
  "inline-flex items-center justify-center gap-2 rounded-md transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-primary focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer font-medium",
  {
    variants: {
      variant: {
        primary:
          "bg-white text-black font-openSans font-bold hover:bg-gray-50 active:bg-gray-100",
        secondary:
          "bg-brand-primary text-white hover:bg-brand-primary/90 active:bg-brand-primary/80",
        outline:
          "border border-brand-primary text-brand-primary bg-transparent hover:bg-brand-primary/5 active:bg-brand-primary/10",
      },
      size: {
        sm: "px-3 py-1.5 text-sm",
        md: "px-4 py-2 text-base",
        lg: "px-6 py-3 text-lg",
      },
    },
  },
);

type BaseProps = VariantProps<typeof button> & {
  class?: string;
};

type ButtonProps = BaseProps & {
  href?: never;
  disabled?: boolean;
} & HTMLAttributes<"button">;

type LinkProps = BaseProps & {
  href: string;
  disabled?: never;
} & HTMLAttributes<"a">;

export type Props = ButtonProps | LinkProps;

const {
  class: className,
  //@ts-ignore
  variant = "primary",
  //@ts-ignore
  size = "md",
  //@ts-ignore
  disabled = false,
  href,
  ...props
} = Astro.props;
---

{href ? (
  <a
    href={href}
    class={button({ variant, size, className })}
    {...(props as any)}
  >
    <slot />
  </a>
) : (
  <button
    class={button({ variant, size, className })}
    disabled={disabled}
    {...(props as any)}
  >
    <slot />
  </button>
)}
